02/12 14:06:29 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 0
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /data/apps/cuda/11.6
    NVCC: Cuda compilation tools, release 11.6, V11.6.112
    GCC: gcc (GCC) 9.3.0
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 4.7.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

02/12 14:06:30 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255)
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(256, 256)),
    pretrained=
    '/HOME/scz4239/run/mmsegmentation/checkpoints/resnet50_v1c-2cccc1ad.pth',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'GlomeruliDataset'
data_root = '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset'
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(320, 240),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(320, 240), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=dict(backend='local')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='GlomeruliDataset',
        data_root='/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset',
        data_prefix=dict(
            img_path=
            '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/images',
            seg_map_path=
            '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(320, 240),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs')
        ],
        ann_file=
        '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/splits/train.txt'
    ))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='GlomeruliDataset',
        data_root='/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset',
        data_prefix=dict(
            img_path=
            '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/images',
            seg_map_path=
            '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file=
        '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/splits/val.txt'
    ))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='GlomeruliDataset',
        data_root='/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset',
        data_prefix=dict(
            img_path=
            '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/images',
            seg_map_path=
            '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file=
        '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/splits/val.txt'
    ))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = '/HOME/scz4239/run/mmsegmentation/checkpoints/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=1600, val_interval=400)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=400),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
img_dir = '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/images'
ann_dir = '/HOME/scz4239/run/mmsegmentation/data/Glomeruli-dataset/masks'
randomness = dict(seed=0)
launcher = 'none'
work_dir = 'outputs/resnet50_Glomeruli'

02/12 14:06:30 - mmengine - WARNING - The "visualizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:30 - mmengine - WARNING - The "vis_backend" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:31 - mmengine - WARNING - The "model" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
/data/run01/scz4239/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/data/run01/scz4239/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/data/run01/scz4239/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/data/run01/scz4239/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
02/12 14:06:33 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
02/12 14:06:33 - mmengine - WARNING - The "hook" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
/data/run01/scz4239/mmsegmentation/mmseg/engine/hooks/visualization_hook.py:61: UserWarning: The draw is False, it means that the hook for visualization will not take effect. The results will NOT be visualized or stored.
  warnings.warn('The draw is False, it means that the '
02/12 14:06:33 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
02/12 14:06:34 - mmengine - WARNING - The "loop" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:34 - mmengine - WARNING - The "dataset" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:34 - mmengine - WARNING - The "transform" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:34 - mmengine - WARNING - The "data sampler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:34 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:34 - mmengine - WARNING - The "optimizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:34 - mmengine - WARNING - The "optim_wrapper" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:34 - mmengine - WARNING - The "parameter scheduler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:34 - mmengine - WARNING - The "metric" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
/HOME/scz4239/.conda/envs/mmSeg/lib/python3.8/site-packages/mmengine/evaluator/metric.py:47: UserWarning: The prefix is not set in metric class IoUMetric.
  warnings.warn('The prefix is not set in metric class '
02/12 14:06:35 - mmengine - WARNING - The "weight initializer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
02/12 14:06:35 - mmengine - INFO - load model from: /HOME/scz4239/run/mmsegmentation/checkpoints/resnet50_v1c-2cccc1ad.pth
02/12 14:06:35 - mmengine - INFO - Loads checkpoint by local backend from path: /HOME/scz4239/run/mmsegmentation/checkpoints/resnet50_v1c-2cccc1ad.pth
02/12 14:06:36 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Loads checkpoint by local backend from path: /HOME/scz4239/run/mmsegmentation/checkpoints/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth
The model and loaded state dict do not match exactly

size mismatch for decode_head.conv_seg.weight: copying a param with shape torch.Size([19, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 512, 1, 1]).
size mismatch for decode_head.conv_seg.bias: copying a param with shape torch.Size([19]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for auxiliary_head.conv_seg.weight: copying a param with shape torch.Size([19, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for auxiliary_head.conv_seg.bias: copying a param with shape torch.Size([19]) from checkpoint, the shape in current model is torch.Size([2]).
02/12 14:06:36 - mmengine - INFO - Load checkpoint from /HOME/scz4239/run/mmsegmentation/checkpoints/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth
02/12 14:06:36 - mmengine - INFO - Checkpoints will be saved to /data/run01/scz4239/mmsegmentation/outputs/resnet50_Glomeruli.
02/12 14:07:06 - mmengine - INFO - Iter(train) [ 100/1600]  lr: 9.9779e-03  eta: 0:07:32  time: 0.1533  data_time: 0.0230  memory: 11478  loss: 0.1182  decode.loss_ce: 0.0858  decode.acc_seg: 98.7212  aux.loss_ce: 0.0325  aux.acc_seg: 98.7212
02/12 14:07:21 - mmengine - INFO - Iter(train) [ 200/1600]  lr: 9.9557e-03  eta: 0:05:16  time: 0.1456  data_time: 0.0143  memory: 3774  loss: 0.0477  decode.loss_ce: 0.0334  decode.acc_seg: 99.9683  aux.loss_ce: 0.0144  aux.acc_seg: 99.9683
02/12 14:07:30 - mmengine - INFO - Exp name: resnet50_20230212_140627
02/12 14:07:36 - mmengine - INFO - Iter(train) [ 300/1600]  lr: 9.9334e-03  eta: 0:04:19  time: 0.1428  data_time: 0.0110  memory: 3774  loss: 0.0527  decode.loss_ce: 0.0367  decode.acc_seg: 98.5434  aux.loss_ce: 0.0160  aux.acc_seg: 99.8386
02/12 14:07:49 - mmengine - INFO - Iter(train) [ 400/1600]  lr: 9.9111e-03  eta: 0:03:40  time: 0.1367  data_time: 0.0054  memory: 3774  loss: 0.0422  decode.loss_ce: 0.0290  decode.acc_seg: 94.1195  aux.loss_ce: 0.0132  aux.acc_seg: 91.7181
02/12 14:07:49 - mmengine - INFO - Saving checkpoint at 400 iterations
02/12 14:07:54 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:10  time: 0.0145  data_time: 0.0016  memory: 9330  
02/12 14:07:55 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:06  time: 0.0146  data_time: 0.0017  memory: 696  
02/12 14:07:57 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:03  time: 0.0147  data_time: 0.0018  memory: 696  
02/12 14:07:58 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:02  time: 0.0147  data_time: 0.0017  memory: 696  
02/12 14:08:00 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0146  data_time: 0.0018  memory: 696  
02/12 14:08:00 - mmengine - INFO - per class results:
02/12 14:08:00 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 98.86 | 99.95 |
| glomeruili | 41.84 |  43.0 |
+------------+-------+-------+
02/12 14:08:00 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.8600  mIoU: 70.3500  mAcc: 71.4700
02/12 14:08:13 - mmengine - INFO - Iter(train) [ 500/1600]  lr: 9.8888e-03  eta: 0:03:12  time: 0.1361  data_time: 0.0052  memory: 3774  loss: 0.0309  decode.loss_ce: 0.0204  decode.acc_seg: 100.0000  aux.loss_ce: 0.0104  aux.acc_seg: 99.9405
02/12 14:08:27 - mmengine - INFO - Iter(train) [ 600/1600]  lr: 9.8665e-03  eta: 0:02:48  time: 0.1363  data_time: 0.0052  memory: 3774  loss: 0.0194  decode.loss_ce: 0.0120  decode.acc_seg: 100.0000  aux.loss_ce: 0.0074  aux.acc_seg: 100.0000
02/12 14:08:41 - mmengine - INFO - Iter(train) [ 700/1600]  lr: 9.8442e-03  eta: 0:02:27  time: 0.1360  data_time: 0.0048  memory: 3774  loss: 0.0246  decode.loss_ce: 0.0159  decode.acc_seg: 99.4395  aux.loss_ce: 0.0087  aux.acc_seg: 97.1508
02/12 14:08:54 - mmengine - INFO - Iter(train) [ 800/1600]  lr: 9.8218e-03  eta: 0:02:08  time: 0.1363  data_time: 0.0049  memory: 3774  loss: 0.0278  decode.loss_ce: 0.0186  decode.acc_seg: 99.9509  aux.loss_ce: 0.0092  aux.acc_seg: 99.9740
02/12 14:08:54 - mmengine - INFO - Saving checkpoint at 800 iterations
02/12 14:08:57 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:06  time: 0.0145  data_time: 0.0017  memory: 696  
02/12 14:08:59 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:04  time: 0.0146  data_time: 0.0017  memory: 696  
02/12 14:09:00 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:03  time: 0.0148  data_time: 0.0018  memory: 696  
02/12 14:09:02 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:01  time: 0.0148  data_time: 0.0018  memory: 696  
02/12 14:09:03 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0148  data_time: 0.0018  memory: 696  
02/12 14:09:04 - mmengine - INFO - per class results:
02/12 14:09:04 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.22 | 99.78 |
| glomeruili |  63.9 | 71.31 |
+------------+-------+-------+
02/12 14:09:04 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.2300  mIoU: 81.5600  mAcc: 85.5400
02/12 14:09:17 - mmengine - INFO - Iter(train) [ 900/1600]  lr: 9.7995e-03  eta: 0:01:50  time: 0.1362  data_time: 0.0054  memory: 3774  loss: 0.0367  decode.loss_ce: 0.0250  decode.acc_seg: 98.3508  aux.loss_ce: 0.0116  aux.acc_seg: 99.0966
02/12 14:09:31 - mmengine - INFO - Exp name: resnet50_20230212_140627
02/12 14:09:31 - mmengine - INFO - Iter(train) [1000/1600]  lr: 9.7772e-03  eta: 0:01:33  time: 0.1365  data_time: 0.0053  memory: 3774  loss: 0.0231  decode.loss_ce: 0.0159  decode.acc_seg: 97.5895  aux.loss_ce: 0.0073  aux.acc_seg: 97.1576
02/12 14:09:44 - mmengine - INFO - Iter(train) [1100/1600]  lr: 9.7549e-03  eta: 0:01:16  time: 0.1367  data_time: 0.0055  memory: 3774  loss: 0.0133  decode.loss_ce: 0.0081  decode.acc_seg: 99.8112  aux.loss_ce: 0.0052  aux.acc_seg: 99.3979
02/12 14:09:58 - mmengine - INFO - Iter(train) [1200/1600]  lr: 9.7325e-03  eta: 0:01:00  time: 0.1363  data_time: 0.0050  memory: 3774  loss: 0.0334  decode.loss_ce: 0.0229  decode.acc_seg: 99.9675  aux.loss_ce: 0.0105  aux.acc_seg: 99.7800
02/12 14:09:58 - mmengine - INFO - Saving checkpoint at 1200 iterations
02/12 14:10:01 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:06  time: 0.0147  data_time: 0.0018  memory: 696  
02/12 14:10:03 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:04  time: 0.0147  data_time: 0.0018  memory: 696  
02/12 14:10:04 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:03  time: 0.0147  data_time: 0.0018  memory: 696  
02/12 14:10:06 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:01  time: 0.0149  data_time: 0.0019  memory: 696  
02/12 14:10:07 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0149  data_time: 0.0018  memory: 696  
02/12 14:10:07 - mmengine - INFO - per class results:
02/12 14:10:07 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 98.53 | 98.72 |
| glomeruili | 54.36 | 90.38 |
+------------+-------+-------+
02/12 14:10:07 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.5600  mIoU: 76.4400  mAcc: 94.5500
02/12 14:10:21 - mmengine - INFO - Iter(train) [1300/1600]  lr: 9.7102e-03  eta: 0:00:45  time: 0.1363  data_time: 0.0050  memory: 3774  loss: 0.0189  decode.loss_ce: 0.0105  decode.acc_seg: 99.8544  aux.loss_ce: 0.0084  aux.acc_seg: 99.8813
02/12 14:10:35 - mmengine - INFO - Iter(train) [1400/1600]  lr: 9.6878e-03  eta: 0:00:29  time: 0.1358  data_time: 0.0047  memory: 3774  loss: 0.0172  decode.loss_ce: 0.0118  decode.acc_seg: 99.4743  aux.loss_ce: 0.0054  aux.acc_seg: 99.0688
02/12 14:10:48 - mmengine - INFO - Iter(train) [1500/1600]  lr: 9.6655e-03  eta: 0:00:14  time: 0.1361  data_time: 0.0050  memory: 3774  loss: 0.0325  decode.loss_ce: 0.0216  decode.acc_seg: 98.3953  aux.loss_ce: 0.0109  aux.acc_seg: 98.9893
02/12 14:11:02 - mmengine - INFO - Iter(train) [1600/1600]  lr: 9.6431e-03  eta: 0:00:00  time: 0.1357  data_time: 0.0049  memory: 3774  loss: 0.0290  decode.loss_ce: 0.0200  decode.acc_seg: 99.6084  aux.loss_ce: 0.0090  aux.acc_seg: 99.8211
02/12 14:11:02 - mmengine - INFO - Saving checkpoint at 1600 iterations
02/12 14:11:05 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:06  time: 0.0145  data_time: 0.0017  memory: 696  
02/12 14:11:06 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:04  time: 0.0147  data_time: 0.0018  memory: 696  
02/12 14:11:08 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:03  time: 0.0147  data_time: 0.0018  memory: 696  
02/12 14:11:09 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:01  time: 0.0147  data_time: 0.0018  memory: 696  
02/12 14:11:11 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0148  data_time: 0.0018  memory: 696  
02/12 14:11:11 - mmengine - INFO - per class results:
02/12 14:11:11 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.23 | 99.52 |
| glomeruili |  68.0 | 84.79 |
+------------+-------+-------+
02/12 14:11:11 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.2400  mIoU: 83.6200  mAcc: 92.1600
